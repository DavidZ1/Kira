/*
 * UUID.java
 *
 * Created 07.02.2003
 *
 * eaio: UUID - an implementation of the UUID specification
 * Copyright (c) 2003-2009 Johann Burkard (jb@eaio.com) http://eaio.com.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
package com.yihaodian.architecture.hedwig.common.uuid;

/**
 * com/eaio/uuid/UUIDHelper.java . Generated by the IDL-to-Java compiler (portable), version "3.1"
 * from uuid.idl Sonntag, 7. MÃ¤rz 2004 21.35 Uhr CET
 */


/**
 * The UUID struct.
 */
abstract public class UUIDHelper {

  private static String _id = "IDL:com/eaio/uuid/UUID:1.0";
  private static org.omg.CORBA.TypeCode __typeCode = null;
  private static boolean __active = false;

  public static void insert(org.omg.CORBA.Any a, UUID that) {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream();
    a.type(type());
    write(out, that);
    a.read_value(out.create_input_stream(), type());
  }

  public static UUID extract(org.omg.CORBA.Any a) {
    return read(a.create_input_stream());
  }

  synchronized public static org.omg.CORBA.TypeCode type() {
    if (__typeCode == null) {
      synchronized (org.omg.CORBA.TypeCode.class) {
        if (__typeCode == null) {
          if (__active) {
            return org.omg.CORBA.ORB.init().create_recursive_tc(_id);
          }
          __active = true;
          org.omg.CORBA.StructMember[] _members0 = new org.omg.CORBA.StructMember[2];
          org.omg.CORBA.TypeCode _tcOf_members0 = null;
          _tcOf_members0 = org.omg.CORBA.ORB.init()
              .get_primitive_tc(org.omg.CORBA.TCKind.tk_longlong);
          _members0[0] = new org.omg.CORBA.StructMember(
              "time",
              _tcOf_members0,
              null);
          _tcOf_members0 = org.omg.CORBA.ORB.init()
              .get_primitive_tc(org.omg.CORBA.TCKind.tk_longlong);
          _members0[1] = new org.omg.CORBA.StructMember(
              "clockSeqAndNode",
              _tcOf_members0,
              null);
          __typeCode = org.omg.CORBA.ORB.init()
              .create_struct_tc(UUIDHelper.id(), "UUID", _members0);
          __active = false;
        }
      }
    }
    return __typeCode;
  }

  public static String id() {
    return _id;
  }

  public static UUID read(org.omg.CORBA.portable.InputStream istream) {
    UUID value = new UUID();
    value.time = istream.read_longlong();
    value.clockSeqAndNode = istream.read_longlong();
    return value;
  }

  public static void write(org.omg.CORBA.portable.OutputStream ostream, UUID value) {
    ostream.write_longlong(value.time);
    ostream.write_longlong(value.clockSeqAndNode);
  }

}
