akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
  log-dead-letters-during-shutdown = off
  log-config-on-start = off
  log-dead-letters = off
  actor
    {

      serializers
        {
          #proto = "akka.remote.serialization.ProtobufSerializer"
         # hessian = "com.yhd.arch.photon.codec.HedwigHessianCodec"
        }

      serialization-bindings
        {
          # Since com.google.protobuf.Message does not extend Serializable but
          # GeneratedMessage does, need to use the more specific one here in order
          # to avoid ambiguity
          #"com.google.protobuf.GeneratedMessage" = proto
          #"com.yhd.arch.photon.invoker.DefaultRequest" = hessian
          #"com.yhd.arch.photon.invoker.DefaultResponse" = hessian
        }
      provider = "akka.remote.RemoteActorRefProvider"

      mailbox {

        bounded-deque-based {
          # FQCN of the MailboxType, The Class of the FQCN must have a public
          # constructor with (akka.actor.ActorSystem.Settings,
          # com.typesafe.config.Config) parameters.
          mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
          mailbox-capacity = 30
          mailbox-push-timeout-time = 1s
          stash-capacity = -1
        }
      }
    }

  remote
    {
      transport-failure-detector {
        heartbeat-interval = 5 s
        acceptable-heartbeat-pause = 30 s
      }

      netty.tcp {
        maximum-frame-size = 41943040b
        send-buffer-size = 512000b
        receive-buffer-size = 512000b

      }
      ### Default dispatcher for the remoting subsystem
      default-remote-dispatcher {
        type = Dispatcher
        # executor = "fork-join-executor"
        # fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        # parallelism-min = 16
        # parallelism-factor = 3.0
        # parallelism-max = 32
        #}
        executor = "thread-pool-executor"
        # Configuration for the thread pool
        thread-pool-executor {
          # Keep alive time for threads
          keep-alive-time = 60s

          # Min number of threads to cap factor-based core number to
          core-pool-size-min = 16

          # The core pool size factor is used to determine thread pool core size
          # using the following formula: ceil(available processors * factor).
          # Resulting size is then bounded by the core-pool-size-min and
          # core-pool-size-max values.
          core-pool-size-factor = 3.0

          # Max number of threads to cap factor-based number to
          core-pool-size-max = 64

          # Minimum number of threads to cap factor-based max number to
          # (if using a bounded task queue)
          max-pool-size-min = 16

          # Max no of threads (if using a bounded task queue) is determined by
          # calculating: ceil(available processors * factor)
          max-pool-size-factor  = 3.0

          # Max number of threads to cap factor-based max number to
          # (if using a  bounded task queue)
          max-pool-size-max = 64

          # Specifies the bounded capacity of the task queue (< 1 == unbounded)
          task-queue-size = 100

          # Specifies which type of task queue will be used, can be "array" or
          # "linked" (default)
          task-queue-type = "linked"

          # Allow core threads to time out
          allow-core-timeout = on
        }
      }
    }

}